{"version":3,"sources":["assets/plus_button.svg","assets/lixeira_icon.svg","App.js","index.js"],"names":["App","useState","cardNotesArray","setCardNotesArray","titleNotesList","setTitleNotesList","notesStorage","setNotesStorage","titleNoteSelected","setTitleNoteSelected","idNoteSelected","setIdNoteSelected","bodyNoteSelected","setBodyNoteSelected","blockEnterFunctionValue","setBlockEnterFunctionValue","activeBurger1","setActiveBurger1","activeBurger2","setActiveBurger2","activeBurger3","setActiveBurger3","showAsideMobile","setShowAsideMobile","charactersTitleMax","setCharactersTitleMax","activeBurgerFunction","getAllNotes","JSON","parse","localStorage","getItem","map","value","index","className","activeItem","id","onClick","e","selectNote","title","removeNotePermanently","src","lixeiraIconImg","alt","reverse","sort","a","b","Date","updated","useEffect","noteSelected","find","target","length","body","noteWithSelectedItem","setItem","stringify","storageWithNewNote","console","log","push","Math","floor","random","update","alert","removeNoteUpdate","notesFiltedForUpdate","filter","Number","notesFilted","key","saveNotes","plusButtonImg","onKeyPress","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7a69886.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/plus_button.35949e92.svg\";","export default __webpack_public_path__ + \"static/media/lixeira_icon.e773633d.svg\";","import { useEffect, useState } from \"react\";\n\nimport \"./style.scss\"\n\nimport plusButtonImg from \"./assets/plus_button.svg\";\nimport lixeiraIconImg from \"./assets/lixeira_icon.svg\";\nfunction App() {\n\n  let [cardNotesArray, setCardNotesArray] = useState([])\n  let [titleNotesList, setTitleNotesList] = useState([])\n  let [notesStorage, setNotesStorage] = useState([])\n\n  let [titleNoteSelected, setTitleNoteSelected] = useState(\"Notes App\")\n  let [idNoteSelected, setIdNoteSelected] = useState(\"\")\n  let [bodyNoteSelected, setBodyNoteSelected] = useState(\"Selecione uma Nota para utilizar o app...\")\n\n  let [blockEnterFunctionValue, setBlockEnterFunctionValue] = useState(true)\n\n  let [activeBurger1, setActiveBurger1] = useState(\"\")\n  let [activeBurger2, setActiveBurger2] = useState(\"\")\n  let [activeBurger3, setActiveBurger3] = useState(\"\")\n\n  let [showAsideMobile, setShowAsideMobile] = useState(\"\")\n\n  let [charactersTitleMax, setCharactersTitleMax] = useState(8);\n\n  useEffect(() => {\n    getAllNotes()\n  }, [])\n\n  function activeBurgerFunction(){\n    if(!activeBurger1){\n      setActiveBurger1(activeBurger1 = \"active-burger-1\")\n      setActiveBurger2(activeBurger2 = \"active-burger-2\")\n      setActiveBurger3(activeBurger3 = \"active-burger-3\")\n\n      setShowAsideMobile(showAsideMobile = \"show-aside-mobile\")\n    }else{\n      setActiveBurger1(activeBurger1 = \"\")\n      setActiveBurger2(activeBurger2 = \"\")\n      setActiveBurger3(activeBurger3 = \"\")\n\n      setShowAsideMobile(showAsideMobile = \"\")\n    }\n  }\n\n  function getAllNotes() {\n    setNotesStorage(notesStorage = JSON.parse(localStorage.getItem(\"notes-app-storage\") || '[]'))\n\n    setCardNotesArray(cardNotesArray = notesStorage)\n\n    setTitleNotesList(titleNotesList = cardNotesArray.map((value, index) => {\n      return (<li key={value.id} className={value.activeItem}> <span id={value.id} onClick={(e) => {\n        selectNote(e)\n        activeBurgerFunction()\n      }}>{value.title}</span> <span className=\"icon-lixeira-span-list-aside\"><img onClick={(e) => {\n        removeNotePermanently(e)\n      }} id={value.id} className=\"lixeira-icon\" src={lixeiraIconImg} alt=\"plus button\" /></span></li>)\n    }).reverse())\n\n    return notesStorage.sort((a, b) => {\n      return new Date(a.updated) > new Date(b.updated) ? -1 : 1\n    })\n  }\n\n  const selectNote = (e) => {\n    const noteSelected = cardNotesArray.find((value, index) => value.id == e.target.id)\n\n    setTitleNoteSelected(titleNoteSelected = noteSelected.title)\n    setCharactersTitleMax(charactersTitleMax = noteSelected.title.length)\n    setBodyNoteSelected(bodyNoteSelected = noteSelected.body)\n    setIdNoteSelected(idNoteSelected = e.target.id)\n\n    const noteWithSelectedItem = cardNotesArray.map((value, index) => {\n      if(value.id == e.target.id){\n        value.activeItem = \"activeItem\"\n        return value;\n      }else{\n        value.activeItem = \"\"\n        return value;\n      }\n    })\n\n    localStorage.setItem(\"notes-app-storage\", JSON.stringify(noteWithSelectedItem))\n    getAllNotes()\n  }\n\n  async function saveNotes() {\n\n    const storageWithNewNote = notesStorage.map(value => {\n      value.activeItem = \"\"\n      return value\n    })\n\n    console.log(storageWithNewNote)\n\n    storageWithNewNote.push({\n      id: Math.floor(Math.random() * 1000000),\n      title: \"new title\",\n      body: \"\",\n      update: new Date(),\n      activeItem: \"activeItem\"\n    })\n    setTitleNoteSelected(titleNoteSelected = storageWithNewNote[storageWithNewNote.length - 1].title)\n    setCharactersTitleMax(charactersTitleMax = storageWithNewNote[storageWithNewNote.length - 1].title.length)\n    setBodyNoteSelected(bodyNoteSelected = storageWithNewNote[storageWithNewNote.length - 1].body)\n    setIdNoteSelected(idNoteSelected = storageWithNewNote[storageWithNewNote.length - 1].id)\n    localStorage.setItem(\"notes-app-storage\", JSON.stringify(storageWithNewNote))\n    getAllNotes()\n  }\n\n  async function updateNotes(e) {\n\n    if (blockEnterFunctionValue) {\n\n      if (titleNoteSelected === \"Notes App\") {\n        alert(\"Selecione uma nota para poder editar\")\n        return;\n      }\n\n      if(e.target.value.length > 29){\n        alert(\"Número máximo de caracteres atingido!\")\n        return;\n      }\n\n      setCharactersTitleMax(charactersTitleMax = e.target.value.length)\n\n      setTitleNoteSelected(titleNoteSelected = e.target.value)\n\n      const notesFiltedForUpdate = await removeNoteUpdate(idNoteSelected)\n\n      notesFiltedForUpdate.push({\n        id: idNoteSelected,\n        title: titleNoteSelected,\n        body: bodyNoteSelected,\n        update: new Date(),\n        activeItem: \"activeItem\"\n      })\n\n      localStorage.setItem(\"notes-app-storage\", JSON.stringify(notesFiltedForUpdate))\n      getAllNotes()\n\n    }\n  }\n\n  async function updateNotesBody(e) {\n\n    if (titleNoteSelected === \"Notes App\") {\n      alert(\"Selecione uma nota para poder editar\")\n      return;\n    }\n    setBodyNoteSelected(bodyNoteSelected = e.target.value)\n\n    const notesFiltedForUpdate = await removeNoteUpdate(idNoteSelected)\n\n    notesFiltedForUpdate.push({\n      id: idNoteSelected,\n      title: titleNoteSelected,\n      body: bodyNoteSelected,\n      update: new Date(),\n      activeItem: \"activeItem\"\n    })\n\n    localStorage.setItem(\"notes-app-storage\", JSON.stringify(notesFiltedForUpdate))\n    getAllNotes()\n\n  }\n\n  const removeNoteUpdate = (idNoteSelected) => {\n\n    const notesFilted = cardNotesArray.filter(value => {\n      if (Number(value.id) == Number(idNoteSelected)) {\n        return false\n      }\n      return true\n    })\n\n    return notesFilted\n  }\n\n  const removeNotePermanently = (e) => {\n    setIdNoteSelected(idNoteSelected = e.target.id)\n\n    const notesFilted = cardNotesArray.filter(value => {\n      if (Number(value.id) == Number(idNoteSelected)) {\n        return false\n      }\n      return true\n    })\n\n    localStorage.setItem(\"notes-app-storage\", JSON.stringify(notesFilted))\n\n    getAllNotes()\n\n    setTitleNoteSelected(titleNoteSelected = \"Notes App\")\n    setIdNoteSelected(idNoteSelected = \"\")\n    setBodyNoteSelected(bodyNoteSelected = \"Selecione uma Nota para utilizar o app...\")\n\n  }\n\n  async function blockEnterFunction(e) {\n\n    if (e.key == \"Enter\") {\n      await setBlockEnterFunctionValue(blockEnterFunctionValue = false)\n      return;\n    }\n\n    await setBlockEnterFunctionValue(blockEnterFunctionValue = true)\n    return;\n  }\n\n  return (\n    <div className=\"container\">\n      <div id=\"menu-hamburge\">\n        <div className={`burger ${activeBurger1}`} onClick={() => activeBurgerFunction()}></div>\n        <div className={`burger ${activeBurger2}`} onClick={() => activeBurgerFunction()}></div>\n        <div className={`burger ${activeBurger3}`} onClick={() => activeBurgerFunction()}></div>\n      </div>\n      <div id=\"characters-title-max-div\">\n        <span>{charactersTitleMax}/29</span>\n      </div>\n      <aside className={showAsideMobile}>\n        <div id=\"cabecalho-aside-div\">\n          <h1>Notes</h1>\n          <img onClick={() => {\n            saveNotes()\n            activeBurgerFunction()\n          }} src={plusButtonImg} alt=\"plus button\" />\n        </div>\n        <div id=\"notes-list-div-aside\">\n          <ul>\n            {titleNotesList}\n          </ul>\n        </div>\n      </aside>\n      <main>\n        <div id=\"title-note-div\">\n          <textarea onKeyPress={blockEnterFunction} onChange={updateNotes} value={titleNoteSelected} />\n        </div>\n        <textarea onChange={updateNotesBody} value={bodyNoteSelected} />\n      </main>\n      <footer>\n        <span> Make By Vitor M. </span>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}